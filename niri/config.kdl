debug {
    // preview-render "screencast"
    // preview-render "screen-capture"
    // dbus-interfaces-in-non-session-instances
    // wait-for-frame-completion-before-queueing
    // enable-overlay-planes
    // disable-cursor-plane
    // disable-direct-scanout
    // restrict-primary-scanout-to-matching-format
    // render-drm-device "/dev/dri/renderD129"
    // render-drm-device "/dev/dri/renderD128"
    // render-drm-device "/dev/dri/card1"
    // force-pipewire-invalid-modifier
    // emulate-zero-presentation-time
    // disable-transactions
    // disable-resize-throttling
    // keep-laptop-panel-on-when-lid-is-closed
    // disable-monitor-names
    // strict-new-window-focus-policy
}

input {
    keyboard {
        xkb {
            layout "us"
            // variant "colemak_dh_ortho,"
            options "compose:ralt,ctrl:nocaps"

            // layout "us"
            // variant "colemak_dh_ortho"
            // options "compose:ralt,ctrl:nocaps"
            // model ""
            // rules ""
        }

        repeat-delay 250
        repeat-rate 35

        // track-layout "window"
    }

    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        accel-speed 0.4
        // click-method "clickfinger"
        // accel-profile "flat"
        // tap-button-map "left-middle-right"
        // left-handed
        // middle-emulation
        // scroll-factor 0.1
        // scroll-factor 2
    }

    mouse {
        // natural-scroll
        // accel-speed -1.0
        // accel-profile "flat"
        // left-handed
        // middle-emulation
        // scroll-factor 0.1
        // scroll-factor 2
    }

    trackpoint {
        // natural-scroll
        // accel-speed -1.0
        // accel-profile "flat"
        // middle-emulation
    }

    tablet {
        // map-to-output "eDP-1"
        // map-to-output "eDP-2"
        // map-to-output "HDMI-A-1"
        // map-to-output "DP-1"
        // map-to-output "Acer Technologies XV320QU LV 420615FCD4200"
        // left-handed
    }

    touch {
        // map-to-output "DP-3"
        // map-to-output "Interaction Systems, Inc TYPE-C TCH00562020"
    }

    // disable-power-key-handling
    // warp-mouse-to-focus
    // focus-follows-mouse
    focus-follows-mouse max-scroll-amount="0%"
    // workspace-auto-back-and-forth
}

overview {
    backdrop-color "#0E0825"
}

gestures {
    hot-corners {
        off
    }
}

// workspace "dash" {
//     open-on-output "eDP-1"
// }

output "HDMI-A-1" {
  mode "2560x1440@143.912"
  position x=1706 y=0
}

output "eDP-1" {
  mode "2560x1600@240.001"
  position x=0 y=500
  scale 1.5
}

output "winit" {
    // scale 2.0
    // scale 3.0
    // scale 1.25
    // scale 1.333
    // transform "flipped-90"
    position x=100 y=200
    // background-color "#030"
}

layout {

  always-center-single-column
  empty-workspace-above-first

  background-color "transparent"

    focus-ring {
        // off
        width 3
        // width 8
        // catppuccin-mocha Sapphire
        active-color "#4E884F"
        // catppuccin-mocha Surface2
        inactive-color "#585b70"
        // inactive-color "green"

        // active-gradient from="#80c8ff" to="#bbddff" angle=45
        // active-gradient from="#f38ba8" to="#f9e2af" angle=45 relative-to="workspace-view"
        // active-gradient from="red" to="orange" angle=45 relative-to="workspace-view" in="oklch longer hue"
    }

    shadow {
        on
        softness 20
        spread 5
        offset x=5 y=5
        draw-behind-window true
        color "#000000aa"
    }

    // focus-ring {
    //     width 2
    //     active-gradient from="#ffd75f" to="#ffafd7"
    // }

    border {
        off
        width 2
        // width 4
        // width 32
        // width 128

        // active-color "#f38ba8"
        // inactive-color "#585b70"

        // active-color "#000"
        // inactive-color "#000"

        // active-gradient from="#f38ba8" to="#f9e2af" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#f38ba8" to="#f9e2af" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#f38ba8aa" to="#f9e2afaa" angle=45 relative-to="workspace-view"

        active-gradient from="red" to="orange" angle=45 relative-to="workspace-view" in="oklch longer hue"
        inactive-gradient from="#585b70" to="#7f849c" angle=45 relative-to="workspace-view"

        // inactive-gradient from="green" to="lightblue" angle=45 relative-to="workspace-view"
        // active-gradient from="#ff0000ff" to="#00ff0011" angle=90 in="srgb-linear"
        // active-gradient from="#ff0000ff" to="transparent" angle=90 in="srgb"
        // active-gradient from="red" to="orange" angle=45 in="oklch longer hue"

        // active-gradient from="yellow" to="red" angle=45 in="oklab" relative-to="workspace-view"
        // inactive-gradient from="yellow" to="red" angle=45
    }

    insert-hint {
        // off
        color "#ffc87f80"
        gradient from="#f38ba880" to="#f9e2af80" angle=45 relative-to="workspace-view"
        // gradient from="#ff000080" to="#ffa50080" angle=45 relative-to="workspace-view" in="oklch longer hue"
    }

    preset-column-widths {
        proportion 0.3333333333333333
        proportion 0.5
        proportion 0.66667
        // proportion 0.25
        // fixed 1000
    }

    /-preset-window-heights {
        proportion 0.3333333333333333
        proportion 0.5
        proportion 0.66667
        // fixed 200
        // fixed 300
    }

    // default-column-width { proportion 0.3333333333333333; }
    default-column-width { proportion 0.75; }

    // gaps 0
    // gaps 8
    gaps 16

    struts {
        left 3
        right 3
        // right 64
        top 8
        // bottom 16
        // top 44
        // bottom 64
        // top 64
    }

    // empty-workspace-above-first

    // center-focused-column "on-overflow"
    // center-focused-column "always"

    // always-center-single-column
}

cursor {
    xcursor-theme "miku-cursor-linux"
    xcursor-size 64
    // xcursor-theme "breeze_cursors"
    // xcursor-theme "arstieonart"
    // xcursor-size 48
    hide-when-typing
    hide-after-inactive-ms 1000
}

prefer-no-csd


spawn-at-startup "swaync"
spawn-at-startup "fcitx5"
spawn-at-startup "nm-applet"
spawn-at-startup "blueman-applet"
// spawn-at-startup "sh" "-c" "GSK_RENDERER=cairo walker --gapplication-service"
spawn-at-startup "clipse" "--listen"
spawn-at-startup "xwayland-satellite" ":12"
spawn-at-startup "nwg-drawer" "-r"
spawn-at-startup "waypaper-engine" "daemon"
spawn-at-startup "waypaper-engine" "run"
// spawn-at-startup "bash" "-c" "~/.cargo/bin/woqu -f ~/Downloads/fallback1.wav -v 4"
// spawn-at-startup "xwaylandvideobridge"
spawn-at-startup "ags" "run" "--gtk4"
spawn-at-startup "way-edges"

// spawn-at-startup dbus-update-activation-environment --all &
// spawn-at-startup dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP # Some fix idk

environment {
    // GSK_RENDERER "cairo"
    // WAYLAND_DISPLAY null

  // xwayland-satellite
  DISPLAY ":12"

  CURRENT_COMPOSITOR "niri"

  XMODIFIERS "@im=fcitx"
  GTK_IM_MODULE "fcitx"
  QT_IM_MODULE "fcitx"
  INPUT_METHOD "fcitx"
  SDL_IM_MODULE "fcitx"

  GDK_BACKEND "wayland,x11,*"
  QT_QPA_PLATFORM "wayland;xcb"
  SDL_VIDEODRIVER "wayland"
  CLUTTER_BACKEND "wayland"

  LIBVA_DRIVER_NAME "nvidia"
  GBM_BACKEND "nvidia-drm"
  __GLX_VENDOR_LIBRARY_NAME "nvidia"
  ELECTRON_OZONE_PLATFORM_HINT "auto"
  NVD_BACKEND "direct"

  QT_AUTO_SCREEN_SCALE_FACTOR "1" 
  QT_QPA_PLATFORM "wayland;xcb" 
  QT_WAYLAND_DISABLE_WINDOWDECORATION "1"
  QT_QPA_PLATFORMTHEME "qt5ct"

  XDG_CURRENT_DESKTOP "Niri"
  XDG_SESSION_TYPE "wayland"
  XDG_SESSION_DESKTOP "Niri"
}

// screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
// screenshot-path "~/Pictures/niri-scale/%M-%S.png"

hotkey-overlay {
    // skip-at-startup
}

animations {
    // off
    // slowdown 100.0
    // slowdown 10.0
    // slowdown 4.0
    // slowdown 3.0
    // slowdown 2.0
    // slowdown 1.5

    workspace-switch {
        // off
        // duration-ms 2500
        // curve "ease-out-cubic"
        spring damping-ratio=0.8 stiffness=200 epsilon=0.0001
    }

    window-open {
        // off
        // duration-ms 2500
        // curve "ease-out-expo"
        // spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001
        // duration-ms 1000
        // curve "linear"

        // custom-shader r"
        //     vec4 open_color(vec3 coords_geo, vec3 size_geo) {
        //         vec3 coords_tex = niri_geo_to_tex * coords_geo;
        //         vec4 color = texture2D(niri_tex, coords_tex.st);
        //
        //         vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
        //         coords = coords / length(size_geo.xy);
        //         float p = niri_clamped_progress;
        //         if (p * p <= dot(coords, coords))
        //             color = vec4(0.0);
        //
        //         return color;
        //     }
        // "

        duration-ms 250
        // custom-shader r"
        //     vec4 open_color(vec3 coords_geo, vec3 size_geo) {
        //         // Scale up the window.
        //         float scale = max(0.0, (niri_progress / 2.0 + 0.5));
        //         coords_geo = vec3((coords_geo.xy - vec2(0.5)) / scale + vec2(0.5), 1.0);
        //
        //         // Get color from the window texture.
        //         vec3 coords_tex = niri_geo_to_tex * coords_geo;
        //         vec4 color = texture2D(niri_tex, coords_tex.st);
        //
        //         // Make the window opaque.
        //         color *= niri_clamped_progress;
        //
        //         return color;
        //     }
        // "
        // custom-shader r"
        //     vec4 open_color(vec3 coords_geo, vec3 size_geo) {
        //         vec3 coords_tex = niri_geo_to_tex * coords_geo;
        //         vec4 color = texture2D(niri_tex, coords_tex.st);
        //
        //         return color;
        //     }
        // "
    }

    window-close {
        // off
        // duration-ms 2500
        duration-ms 3000
        // duration-ms 250
        // spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001

        custom-shader r"
// easeOutQuad 曲线（使动画缓出）
float easeOutQuad(float x) {
    return 1.0 - (1.0 - x) * (1.0 - x);
}

float getEdgeMask(vec2 uv, float fadeWidth) {
  float mask = 1.0;

  mask *= smoothstep(0.0, 1.0, clamp(uv.x / fadeWidth, 0.0, 1.0));
  mask *= smoothstep(0.0, 1.0, clamp(uv.y / fadeWidth, 0.0, 1.0));
  mask *= smoothstep(0.0, 1.0, clamp((1.0 - uv.x) / fadeWidth, 0.0, 1.0));
  mask *= smoothstep(0.0, 1.0, clamp((1.0 - uv.y) / fadeWidth, 0.0, 1.0));

  return mask;
}

// 根据垂直坐标和动画进度计算火焰效果的遮罩，返回
// x 分量：窗口本身的透明度遮罩（用于让窗口从上到下逐渐消失）
// y 分量：火焰效果的透明度遮罩（用于控制火焰的显示强度）
vec2 fireEffectMask(vec2 uv, float progress) {
    const float HIDE_TIME = 0.4;
    const float FADE_WIDTH = 0.1;
    
    float p = easeOutQuad(progress);
    float burnProgress      = clamp(p / HIDE_TIME, 0.0, 1.0);
    float afterBurnProgress = clamp((p - HIDE_TIME) / (1.0 - HIDE_TIME), 0.0, 1.0);

    float t = uv.y * (1.0 - FADE_WIDTH);
    float windowMask = 1.0 - clamp((burnProgress - t) / FADE_WIDTH, 0.0, 1.0);
    float effectMask = clamp(t * (1.0 - windowMask) / burnProgress, 0.0, 1.0);

    if (p > HIDE_TIME) {
        float fade = sqrt(1.0 - afterBurnProgress * afterBurnProgress);
        effectMask *= mix(1.0, 1.0 - t, afterBurnProgress) * fade;
    }

    effectMask *= getEdgeMask(uv, FADE_WIDTH);

    return vec2(windowMask, effectMask);
}

// 将 0..1 的值映射到火焰颜色梯度（采用 5 个关键颜色）
vec4 getFireColor(float v) {
    float steps[5];
    steps[0] = 0.0;
    steps[1] = 0.2;
    steps[2] = 0.35;
    steps[3] = 0.5;
    steps[4] = 0.8;

    vec4 colors[5];
    colors[0] = vec4(76.0 / 255.0, 51.0 / 255.0, 25.0 / 255.0, 1.0) * 0.0;
    colors[1] = vec4(180.0 / 255.0, 55.0 / 255.0, 30.0 / 255.0, 1.0) * 0.0;
    colors[2] = vec4(255.0 / 255.0, 76.0 / 255.0, 38.0 / 255.0, 1.0) * 0.0;
    colors[3] = vec4(255.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0, 1.0) * 1.0;
    colors[4] = vec4(255.0 / 255.0, 166.0 / 255.0, 25.0 / 255.0, 1.0) * 1.0;

          // color1: 'rgba(76, 51, 25, 0.0)',
          // color2: 'rgba(180, 55, 30, 0.7)',
          // color3: 'rgba(255, 76, 38, 0.9)',
          // color4: 'rgba(255, 166, 25, 1)',
          // color5: 'rgba(255, 255, 255, 1)'

    if (v < steps[0]) {
        return colors[0];
    }
    for (int i = 0; i < 4; ++i) {
        if (v <= steps[i + 1]) {
            float t = (v - steps[i]) / (steps[i + 1] - steps[i]);
            return mix(colors[i], colors[i + 1], t);
        }
    }
    return colors[4];
}

// alphaOver 混合函数，按照预乘 alpha 规则叠加 fg 在 bg 之上
vec4 alphaOver(vec4 bg, vec4 fg) {
    return fg + (1.0 - fg.a) * bg;
}


// 3 out, 3 in...
vec3 hash33(vec3 p3) {
  p3 = fract(p3 * vec3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yxz + 33.33);
  return fract((p3.xxy + p3.yxx) * p3.zyx);
}

// 3D Simplex Noise
// MIT License, https://www.shadertoy.com/view/XsX3zB
// Copyright © 2013 Nikita Miropolskiy
float simplex3D(vec3 p) {

  // skew constants for 3D simplex functions
  const float F3 = 0.3333333;
  const float G3 = 0.1666667;

  // 1. find current tetrahedron T and it's four vertices
  // s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices
  // x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertice

  // calculate s and x
  vec3 s = floor(p + dot(p, vec3(F3)));
  vec3 x = p - s + dot(s, vec3(G3));

  // calculate i1 and i2
  vec3 e  = step(vec3(0.0), x - x.yzx);
  vec3 i1 = e * (1.0 - e.zxy);
  vec3 i2 = 1.0 - e.zxy * (1.0 - e);

  // x1, x2, x3
  vec3 x1 = x - i1 + G3;
  vec3 x2 = x - i2 + 2.0 * G3;
  vec3 x3 = x - 1.0 + 3.0 * G3;

  // 2. find four surflets and store them in d
  vec4 w, d;

  // calculate surflet weights
  w.x = dot(x, x);
  w.y = dot(x1, x1);
  w.z = dot(x2, x2);
  w.w = dot(x3, x3);

  // w fades from 0.6 at the center of the surflet to 0.0 at the margin
  w = max(0.6 - w, 0.0);

  // calculate surflet components
  d.x = dot(-0.5 + hash33(s), x);
  d.y = dot(-0.5 + hash33(s + i1), x1);
  d.z = dot(-0.5 + hash33(s + i2), x2);
  d.w = dot(-0.5 + hash33(s + 1.0), x3);

  // multiply d by w^4
  w *= w;
  w *= w;
  d *= w;

  // 3. return the sum of the four surflets
  return dot(d, vec4(52.0)) * 0.5 + 0.5;
}

// Directional artifacts can be reduced by rotating each octave
float simplex3DFractal(vec3 m) {

  // const matrices for 3D rotation
  const mat3 rot1 = mat3(-0.37, 0.36, 0.85, -0.14, -0.93, 0.34, 0.92, 0.01, 0.4);
  const mat3 rot2 = mat3(-0.55, -0.39, 0.74, 0.33, -0.91, -0.24, 0.77, 0.12, 0.63);
  const mat3 rot3 = mat3(-0.71, 0.52, -0.47, -0.08, -0.72, -0.68, -0.7, -0.45, 0.56);

  return 0.5333333 * simplex3D(m * rot1) + 0.2666667 * simplex3D(2.0 * m * rot2) +
         0.1333333 * simplex3D(4.0 * m * rot3) + 0.0666667 * simplex3D(8.0 * m);
}


// 主函数：实现 fire 效果的窗口打开动画
vec4 close_color(vec3 coords_geo, vec3 size_geo) {
    // bool inside = 0.0 <= coords_geo.x && coords_geo.x <= 1.0
    //         && 0.0 <= coords_geo.y && coords_geo.y <= 1.0;
    // // Paint only the area inside the current geometry.
    // if (!inside)
    // {
    //   return vec4(0.0, 0.0, 0.0, 0.0);
    // }

    // 将几何坐标映射到 [0,1]
    vec2 uv = coords_geo.st;

    // 为火焰效果添加垂直运动（向上飘动）
    float movementSpeed = 0.7;
    uv.y += niri_progress * movementSpeed;

    // 设定噪声采样的缩放因子
    float noiseScale = 4.0;
    vec2 noiseUV = uv * noiseScale;

    float noiseVal = simplex3DFractal(vec3(uv * 4.0, niri_progress * movementSpeed * 1.5));

    // 生成火焰颜色
    vec4 fireColor = getFireColor(noiseVal);

    // 根据当前像素的纵向位置和动画进度计算火焰和窗口的遮罩
    vec2 masks = fireEffectMask(coords_geo.xy, niri_progress);
    float windowMask = masks.x;
    float effectMask = masks.y;

    // 采样原窗口纹理颜色（修正：使用 vec2 而非 vec3）
    vec2 texCoords = (niri_geo_to_tex * coords_geo).xy;
    vec4 windowColor = texture2D(niri_tex, texCoords);

    // 调整窗口颜色的 alpha，使其从上到下逐渐“烧掉”
    windowColor.a *= windowMask;
    windowColor.r *= windowMask;
    windowColor.g *= windowMask;
    windowColor.b *= windowMask;

    // 将火焰效果调制后叠加在窗口上
    fireColor *= effectMask;

    // // fade edge horizontal
    // float threshold = 0.03;
    // if (coords_geo.x < threshold) {
    //   fireColor *= coords_geo.x / threshold;
    // } else if (coords_geo.x > 1.0 - threshold) {
    //   fireColor *= (1.0 - coords_geo.x) / threshold;
    // }
    //
    // // fade edge bottom
    // if (coords_geo.y > 1.0 - threshold) {
    //   fireColor *= (1.0 - coords_geo.y) / threshold;
    // }
    vec4 finalColor = alphaOver(windowColor, fireColor);

    return finalColor;
}
        "

        // custom-shader r"
        //     mat2 rotate(float angle) {
        //         return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
        //     }
        //
        //     vec4 close_color(vec3 coords_geo, vec3 size_geo) {
        //         float progress = niri_clamped_progress * niri_clamped_progress;
        //
        //         vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;
        //
        //         coords.y -= progress * 200.0;
        //
        //         float random = (niri_random_seed - 0.5) / 2.0;
        //         random = sign(random) - random;
        //         float max_angle = 0.05 * random;
        //
        //         float angle = progress * max_angle;
        //         coords = rotate(angle) * coords;
        //
        //         coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);
        //
        //         vec3 coords_tex = niri_geo_to_tex * coords_geo;
        //         vec4 color = texture2D(niri_tex, coords_tex.st);
        //
        //         return color * (1.0 - niri_clamped_progress);
        //     }
        // "

        /-custom-shader r"
            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                return color;
            }
        "
    }

    horizontal-view-movement {
        // off
        // duration-ms 500
        // curve "ease-out-cubic"
        spring damping-ratio=1.0 stiffness=300 epsilon=0.00001
        // spring damping-ratio=10.0 stiffness=800 epsilon=0.0001
    }

    window-movement {
        // off
        // duration-ms 750
        // curve "ease-out-cubic"
        // spring damping-ratio=1.0 stiffness=20 epsilon=0.00001
        // spring damping-ratio=0.2 stiffness=800 epsilon=0.0001
    }

    /-window-resize {
        // off
        // duration-ms 500
        // duration-ms 2500
        // curve "ease-out-cubic"
        // spring damping-ratio=0.2 stiffness=800 epsilon=0.0001

        custom-shader r"
            vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;
                vec3 coords_prev_geo = niri_curr_geo_to_prev_geo * coords_curr_geo;

                vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;
                vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
                vec3 coords_stretch_prev = niri_geo_to_tex_prev * coords_curr_geo;

                // We can crop if the current window size is smaller than the next window
                // size. One way to tell is by comparing to 1.0 the X and Y scaling
                // coefficients in the current-to-next transformation matrix.
                bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
                bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;
                bool crop = can_crop_by_x && can_crop_by_y;

                vec4 color;

                if (crop) {
                    // However, when we crop, we also want to crop out anything outside the
                    // current geometry. This is because the area of the shader is unspecified
                    // and usually bigger than the current geometry, so if we don't fill pixels
                    // outside with transparency, the texture will leak out.
                    //
                    // When stretching, this is not an issue because the area outside will
                    // correspond to client-side decoration shadows, which are already supposed
                    // to be outside.
                    if (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x ||
                            coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y) {
                        color = vec4(0.0);
                    } else {
                        color = texture2D(niri_tex_next, coords_crop.st);
                        // color = texture2D(niri_tex_prev, (niri_geo_to_tex_prev * coords_prev_geo).st);
                    }
                } else {
                    // If we can't crop, then crossfade.
                    color = texture2D(niri_tex_next, coords_stretch.st);
                    vec4 color_prev = texture2D(niri_tex_prev, coords_stretch_prev.st);
                    color = mix(color_prev, color, niri_clamped_progress);
                }

                return color;
            }
        "
    }

    config-notification-open-close {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
        // spring damping-ratio=0.1 stiffness=1000 epsilon=0.001
    }

    /-screenshot-ui-open {
        // off
        // duration-ms 200
        // curve "ease-out-quad"
    }
}

layer-rule {
    match namespace="swww"
    place-within-backdrop true
}

window-rule {
  draw-border-with-background false
  geometry-corner-radius 16
  clip-to-geometry true
}


window-rule {
  match title=r#"^(Open File)(.*)$"#
  match title=r#"^(Select a File)(.*)$"#
  match title=r#"^(Choose wallpaper)(.*)$"#
  match title=r#"^(Open Folder)(.*)$"#
  match title=r#"^(Save As)(.*)$"#
  match title=r#"^(Library)(.*)$"#

  // image
  match app-id="imv"

  // dingtalk
  match title="MainMenuPanelView" app-id="com.alibabainc.dingtalk"

  // zen browser video
  match title="Picture-in-Picture"

  match app-id="mpv"

  open-floating true
}

window-rule {
  match title="clipse"
  match app-id="it.mijorus.smile"
  match title="traytui"

  open-floating true

  default-column-width { fixed 1080; }
  default-window-height { fixed 870; }

  default-floating-position x=0 y=0 relative-to="bottom"
  baba-is-float true
}

window-rule {
  match title="traytui"

  default-column-width { fixed 2000; }
}

window-rule {
  match is-focused=false

  opacity 0.98
}

/-window-rule {
    match at-startup=false
    exclude app-id="^Alacritty$"
    exclude app-id="^neovide$"
    exclude app-id="firefox$"

    open-floating true
}

/-window-rule {
    match is-active-in-column=false

    min-height 100
    max-height 100
}

/-window-rule {
    match app-id="Adwaita"
    // match app-id="TextEditor"
    // opacity 0.5
    // block-out-from "screencast"
    geometry-corner-radius 12
    // geometry-corner-radius 0 0 8 8
    clip-to-geometry false
    border {
        // off
        // width 12
        // width 2
    }
}

/-window-rule {
    match app-id="^gnome-terminal-server$"
    // opacity 0.5
    // block-out-from "screen-capture"
    clip-to-geometry false
    geometry-corner-radius 8 8 0 0
    border {
        width 4
    }
}

/-window-rule {
    match title="~/source"
    geometry-corner-radius 12 24 32 64
}

/-window-rule {
    match title="presentation-shm"
    geometry-corner-radius 999
}

/-window-rule {
    match app-id="code"
    // opacity 0.98
    border {
        // off
    }
}

/-window-rule {
    match app-id="weston."
    // block-out-from "screencast"
    geometry-corner-radius 12 24 32 64
    // geometry-corner-radius 999
    clip-to-geometry true
}

// window-rule {
//     match app-id="Alacritty"
//     geometry-corner-radius 12 12 0 0
//     border {
//         width 8
//     }
// }

/-window-rule {
    match app-id="org.freedesktop.weston.simple-egl"
    // min-width 128
    // max-width 128
    // min-height 128
    // max-height 128
    // match is-focused=true
    // match is-active=false
    // opacity 0.9
    // block-out-from "screencast"
    // block-out-from "screen-capture"
    // min-width 1000
    draw-border-with-background false
    // match app-id="mpv"
    // open-on-output "HDMI-A-1"
    // open-maximized true
    // default-column-width { proportion 0.5; }
    // default-window-height { fixed 100; }
    // open-fullscreen false
    // open-floating false
    // open-floating true
}

/-window-rule {
    match app-id="^gimp" title="^GIMP Startup$"

    open-focused false
}

/-window-rule {
    match app-id="^Alacritty$"
    match app-id="^neovide$"
    exclude is-active=true

    opacity 0.95
}

/-window-rule {
    match app-id="^Alacritty$"
    match app-id="^neovide$"
    match app-id="^code$"
    // match title="^niri$"
    match app-id="^labwc$"

    border { on; }
    geometry-corner-radius 8
    // geometry-corner-radius 12
    clip-to-geometry true
}

// window-rule {
//     match app-id="^Alacritty$"
//     match app-id="^neovide$"
//     exclude is-floating=false
//
//     border { off; }
// }

/-window-rule {
    match app-id=r#"^org\.telegram\.desktop$"# title="^Media viewer$"
    open-fullscreen false
    open-floating true
    // default-column-width { proportion 0.5; }
}

// window-rule {
//     match app-id=r#"^org\.wezfurlong\.wezterm$"#
//     default-column-width {}
// }
//
// window-rule {
//     match app-id="^mpv$"
//     match app-id="^hl_linux$"
//     match app-id="^steam_app_524220$" // NieR:Automata
//     variable-refresh-rate true
//     default-column-width {}
// }
//
// window-rule {
//     match app-id="^blender$"
//     match app-id="^gimp"
//     default-column-width { fixed 1200; }
// }
//
// window-rule {
//     match app-id="^obsidian$"
//     default-column-width { fixed 1000; }
// }
//
// window-rule {
//     match at-startup=true app-id="^obsidian$"
//     // open-on-workspace "notes"
//     open-on-workspace "chat"
// }
//
// window-rule {
//     match at-startup=true app-id=r#"^org\.telegram\.desktop$"#
//     exclude title="^Media viewer$"
//
//     open-on-workspace "chat"
// }
//
// window-rule {
//     match at-startup=true app-id=r#"^org\.gnome\.Fractal$"#
//     open-on-workspace "chat"
// }
//
// window-rule {
//     match at-startup=true app-id=r#"^discord"#
//     match at-startup=true app-id=r#"^com\.discordapp\.Discord$"#
//     open-on-workspace "discord"
// }
//
// window-rule {
//     match app-id=r#"^discord"#
//     match app-id=r#"^com\.discordapp\.Discord$"#
//     default-column-width { proportion 0.66667; }
// }
//
// window-rule {
//     match app-id=r#"^org\.mozilla\.firefox$"#
//     exclude title="^Picture-in-Picture$"
//
//     default-column-width { proportion 0.5; }
// }
//
// window-rule {
//     match at-startup=true app-id=r#"^org\.mozilla\.firefox$"#
//
//     open-on-workspace "browser"
//     open-maximized true
// }
//
// window-rule {
//     match at-startup=true app-id=r#"^org\.keepassxc\.KeePassXC$"#
//
//     open-on-workspace "browser"
// }
//
// window-rule {
//     match app-id="^code"
//     default-column-width { proportion 0.66667; }
// }

// window-rule {
//     match app-id=r#"^org\.mozilla\.firefox$"# title=" Grafana "
//
//     open-on-workspace "dash"
//     open-maximized true
// }

// window-rule {
//     match app-id=r#"^org\.keepassxc\.KeePassXC$"#
//     match app-id=r#"^org\.gnome\.World\.Secrets$"#
//     match app-id=r#"^org\.telegram\.desktop$"#
//
//     // Doesn't quite work: Firefox changes the title one frame early.
//     match app-id=r#"^org\.mozilla\.firefox$"# title="- Gmail "
//     match app-id=r#"^org\.mozilla\.firefox$"# title="^Google Calendar "
//     match app-id=r#"^org\.mozilla\.firefox$"# title="Todoist "
//     match app-id=r#"^org\.mozilla\.firefox$"# title=r#"^GNOME( \*)?( \[\d+\])? \| "#
//     match app-id=r#"^org\.mozilla\.firefox$"# title=r#"^Element "#
//     match app-id=r#"^org\.mozilla\.firefox$"# title=r#"Discord \| "#
//
//     block-out-from "screencast"
//     // block-out-from "screen-capture"
//
//     border {
//         // off
//         // active-color "red"
//     }
//
//     // clip-to-geometry false
//     // geometry-corner-radius 12
// }
//
// window-rule {
//     match app-id="firefox$" title="^Picture-in-Picture$"
//     match app-id=r#"^AmneziaVPN$"#
//     match app-id="^mpv$"
//     match app-id=r#"^org\.gnome\.Loupe$"#
//     match app-id=r#"^org\.gnome\.Calculator$"#
//
//     open-floating true
// }
//
// // Always focus the KeePassXC-Browser unlock dialog.
// //
// // This dialog opens parented to the KeePassXC window rather than the browser,
// // so it doesn't get auto-focused by default.
// window-rule {
//     match app-id=r#"^org\.keepassxc\.KeePassXC$"# title="^KeePassXC - Browser Access Request$"
//     match app-id=r#"^org\.keepassxc\.KeePassXC$"# title="^Unlock Database - KeePassXC$"
//
//     open-focused true
// }
//
// window-rule {
//     // match app-id="Alacritty"
//     // match app-id="Adwaita"
//     // match title="About GTK Demo"
//     // match at-startup=true
//     // opacity 0.9
//     // opacity 0.5
//     // opacity 0.98
//
//     // open-on-output "eDP-1"
//     // open-on-output "Dell Inc. Dell S2716DG #ASOwvAqQj0Dd"
//     // open-on-workspace "browser"
//     // default-column-width { proportion 0.5; }
//     // default-column-width { fixed 400; }
//     // default-column-width {}
//     // default-window-height { proportion 0.25; }
//     // default-window-height { proportion 1.1; }
//     // default-window-height { fixed 100; }
//     // open-maximized true
//     // open-fullscreen true
//     // open-floating false
//     // open-floating true
//     // open-focused false
//     // open-focused true
//     // block-out-from "screencast"
//     // default-floating-position x=0 y=0 relative-to="bottom-right"
//
//     // min-width 600
//     // max-width 600
//     // min-height 600
//     // max-height 600
//
//     focus-ring {
//         // off
//         // on
//         // active-gradient from="red" to="green"
//         // active-color "lightgreen"
//         // width 1
//     }
//
//     border {
//         // off
//         // on
//         // width 12
//         // width 0
//         // active-color "#ff808080"
//         // active-color "red"
//     }
//
//     // draw-border-with-background true
//     // draw-border-with-background false
//
//     // geometry-corner-radius 12 24 32 64
//     // geometry-corner-radius 999
//     // geometry-corner-radius 1
//     // geometry-corner-radius 12
//     // geometry-corner-radius 6
//     // clip-to-geometry true
// }
//
// /-layer-rule {
//     // match namespace="waybar"
//     // match namespace="launcher"
//     // match namespace="^notifications$"
//     opacity 0.5
//     block-out-from "screencast"
// }

layer-rule {
    // mako
    match namespace="^notifications$"
    block-out-from "screencast"
}

layer-rule {

  match namespace="^way-edges-widget$"
  // shadow {
  //   on
  //   softness 10
  //   offset x=0 y=0
  //   color "#00000055"
  // }
}

binds {
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Return { spawn "kitty"; }
    Mod+E { spawn "thunar"; }
    Mod+B { spawn "firefox"; }
    Mod+Ctrl+B { spawn "zen-browser"; }
    Mod+Ctrl+V { spawn "pavucontrol"; }
    Mod+Shift+Period { spawn "smile"; }
    Mod+V { spawn "kitty" "-T" "clipse" "clipse"; }
    Mod+T { spawn "kitty" "-T" "traytui" "tray-tui"; }
    // Mod+Ctrl+Space { spawn "sh" "-c" "pkill nwg-drawer || nwg-drawer"; }
    Mod+Ctrl+Space { spawn "nwg-drawer"; }
    Mod+A { spawn "swaync-client" "-t" "-sw"; }
    Mod+Shift+S { spawn "sh" "-c" "wayfreeze & PID=$!; sleep .1; grim -g \"$(slurp)\" - | wl-copy; kill $PID; wl-paste | satty --filename - --output-filename ~/Pictures/Screenshots/satty-$(date '+%Y%m%d-%H:%M:%S').png"; }
    Mod+Shift+C { spawn "hyprpicker" "-a"; }

    Mod+Shift+D { spawn "way-edges" "togglepin" "common:stats"; }
    Mod+Shift+A { spawn "way-edges" "togglepin" "common:time"; }
    Mod+Shift+E { spawn "way-edges" "togglepin" "tray:tray"; }

    Mod+m { spawn "ags" "request" "power-menu"; }


    XF86AudioRaiseVolume allow-when-locked=true repeat=false { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true repeat=false { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true repeat=false { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true repeat=false { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    Mod+Q { close-window; }

    Mod+Tab { toggle-overview; }

    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }

    Mod+Alt+Down    { move-workspace-down; }
    Mod+Alt+Up      { move-workspace-up; }

    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }
    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Ctrl+H     { focus-monitor-left; }
    Mod+Ctrl+L     { focus-monitor-right; }

    // Mod+Shift+H     { focus-monitor-left; }
    // Mod+Shift+J     { focus-monitor-down; }
    // Mod+Shift+K     { focus-monitor-up; }
    // Mod+Shift+L     { focus-monitor-right; }
    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }

    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }

    Mod+Shift+Alt+H     { move-workspace-to-monitor-left; }
    Mod+Shift+Alt+J     { move-workspace-to-monitor-down; }
    Mod+Shift+Alt+K     { move-workspace-to-monitor-up; }
    Mod+Shift+Alt+L     { move-workspace-to-monitor-right; }
    Mod+Shift+Alt+Left  { move-workspace-to-monitor-left; }
    Mod+Shift+Alt+Down  { move-workspace-to-monitor-down; }
    Mod+Shift+Alt+Up    { move-workspace-to-monitor-up; }
    Mod+Shift+Alt+Right { move-workspace-to-monitor-right; }


    Mod+Alt+J          { move-column-to-workspace-down; }
    Mod+Alt+K          { move-column-to-workspace-up; }
    Mod+Alt+Page_Down  { move-column-to-workspace-down; }
    Mod+Alt+Page_Up    { move-column-to-workspace-up; }
    Mod+Ctrl+J           { focus-workspace-down; }
    Mod+Ctrl+K           { focus-workspace-up; }
    Mod+Ctrl+Page_Down   { focus-workspace-down; }
    Mod+Ctrl+Page_Up     { focus-workspace-up; }


    Mod+Ctrl+WheelScrollDown            cooldown-ms=150 { focus-workspace-down; }
    Mod+Ctrl+WheelScrollUp              cooldown-ms=150 { focus-workspace-up; }
    Mod+Alt+WheelScrollDown       cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Alt+WheelScrollUp         cooldown-ms=150 { move-column-to-workspace-up; }
    Mod+Shift+WheelScrollDown      { move-column-right; }
    Mod+Shift+WheelScrollUp       { move-column-left; }
    Mod+Ctrl+Shift+WheelScrollUp           { set-column-width "+1%"; }
    Mod+Ctrl+Shift+WheelScrollDown         { set-column-width "-1%"; }

    Mod+WheelScrollDown           { focus-column-right; }
    Mod+WheelScrollUp            { focus-column-left; }

    // Mod+TouchpadScrollUp   allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }
    // Mod+TouchpadScrollDown allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollLeft  { focus-column-left; }
    // Mod+TouchpadScrollRight { focus-column-right; }


    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }


    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }
    // Mod+BracketLeft  { focus-column-or-monitor-left; }
    // Mod+BracketRight { focus-column-or-monitor-right; }
    // Mod+BracketLeft  { focus-window-or-monitor-up; }
    // Mod+BracketRight { focus-window-or-monitor-down; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+D { maximize-column; }
    Mod+F { fullscreen-window; }
    Mod+C { center-column; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+Ctrl+Minus { set-column-width "-1"; }
    Mod+Ctrl+Equal { set-column-width "+1"; }

    Mod+Shift+Minus      { set-window-height "-10%"; }
    Mod+Shift+Equal      { set-window-height "+10%"; }
    Mod+Shift+Ctrl+Minus { set-window-height "-1"; }
    Mod+Shift+Ctrl+Equal { set-window-height "+1"; }

    // Mod+0            { set-column-width "960"; }
    // Mod+Shift+0      { set-window-height "540"; }
    // Mod+Alt+0        { set-column-width "1280"; }
    // Mod+Shift+Alt+0  { set-window-height "720"; }
    // Mod+Ctrl+0       { set-column-width "1920"; }
    // Mod+Shift+Ctrl+0 { set-window-height "1080"; }

    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Mod+Space { switch-focus-between-floating-and-tiling; }
    Mod+Shift+Space { toggle-window-floating; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    Mod+P { screenshot; }
    Mod+W { toggle-column-tabbed-display; }

    // Mod+Shift+E { quit; }
    // Ctrl+Alt+Delete { quit; }
    // Mod+Shift+P { power-off-monitors; }

    // Mod+Shift+Ctrl+T { toggle-debug-tint; }
    // Mod+Shift+Ctrl+O { debug-toggle-opaque-regions; }
    // Mod+Shift+Ctrl+D { debug-toggle-damage; }

    // Mod+Ctrl+MouseLeft { close-window; }
    // Mod+MouseMiddle    { maximize-column; }
}
